.container {
    font-size: 30px;
    min-height: 300px;
    width: 100%;
    background: lightgray;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: 50px auto 1fr auto;
    grid-gap: 10px;

    grid-template-areas: 
    "header"
    "advert"
    "content"
    "footer";
}

/* Media Queries */
@media (min-width: 700px) {
    .container {
        grid-template-columns: auto 1fr;
        grid-template-rows: auto 1fr auto;
        grid-template-areas: 
        "advert header"
        "advert content"
        "advert footer";
    }
}

@media (min-width: 1000px) {
    .container {
        grid-template-areas: 
        "header header"
        "advert content"
        "footer footer";
    }
}


.d1 {
    background: skyblue;
    grid-area: header;
}

.d2 {
    background: salmon;
    grid-area: advert;
}

.d3 {
    background: turquoise;
    grid-area: content;

}

.d5 {
    background: greenyellow;
    grid-area: footer;
}

/*
Steps for write code with grids
1. Father or container
2. Sons
- - - -
1. In the container add:
display: grid;
2. Add columns with grid-template-columns in the father:
grid-template-columns: 100px 100px 100px => Numero de columnas or in %
3. Add rows with grid-template-rows
4. CSS units to change the size of columns or rows:
auto 50px 10% 2fr 1 fr;
px = siempre se mantiene.
fr = cambia segun el tamaño.
5. Create a column and row gap => for space beetween the box
6. Gaps faster with grid-gap:
grid-gap => for space in horizontal and vertical
7. Use grid column to control spacing:
-> In the son/box
grid-column: 2 / 4;
grid-row => para controlar la posicion de la caja
8. ALign an item horizontally and vertically:>
justify-self: start - center - end => Horizontally
align-self: start - center - end => vertically
9. Align all items:>
pushing justify or align items => on container
10. Divide the grid into an area template:>
grid-template-area:
    "header header header"
    "advert content content"
    "footer footer footer";
  => Crear el template design de la distribución.
11. grid-area => organiza cada caja y container según el template:>
grid-area: header;
12. Repeat function:>
Para no repetir codigo => in columns and rows
    grid-template-rows: repeat(2, 1fr 50px) 20px;
    grid-template-rows: 1fr 50px 1fr 50px 20px; => Es esto en menos.
13. Auto fill and auto fit
14. Media Queries:>
-> Usando template areas.
    1. Crear default => mobile first
    2. Tablet @media (min-width: 300px)
    3. Desktop @media (min-width: 400px)
    
*/