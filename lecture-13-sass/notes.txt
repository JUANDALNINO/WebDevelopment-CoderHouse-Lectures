SASS
    - Preprocesador CSS

    Sass, o "Syntactically Awesome StyleSheets", es una extensión del lenguaje CSS. Añade características que no están disponibles en el CSS básico, lo que facilita la simplificación y el mantenimiento de las hojas de estilo de tus proyectos.

    En este curso de Sass, aprenderás cómo almacenar datos en variables, anidar CSS, crear estilos reutilizables con mixins, añadir lógica y bucles a tus estilos, y más.

    - Diferencia con CSS => es que utiliza variables
        Parecido a JS
    - En js => let y const
    - En Sass => $nameVar

    Example:
            // 1. Se declaran:
        $main-fonts: Arial, sans-serif;
        $headings-color: green;
            // 2. Se llaman para usarse:
        h1 {
            font-family: $main-fonts;
            color: $headings-color;
        }

    -> Se usa mucho cuando un gran numero de elementos son del mismo color y lo único que hay que cambiar es la variables

    -> Guardar el archivo = .scss


Install:
(ctrl + c => salir)
    - npm init
    - Enter... y rellenar datos
    - Al final => package.json

    - Script => package

    - Compilar : npm run watch-css

    - Live Sass extension compile


ANIDAR CSS CON SASS:
    - Organizar de manera parecida a HTML

    Example:
        // 1. Work on sass: (Family three => padres e hijos)
        nav {
        background-color: red;

            ul {
            list-style: none;

                li {
                display: inline-block;
                }
            }
        }

// Compilación en CSS:
        nav {
        background-color: red;
        }

        nav ul {
        list-style: none;
        }

        nav ul li {
        display: inline-block;
        }

        // Example when don't exist more children:
        .blog-post { 

            h1 {
            text-align: center;
            color: blue;
            }

            p {
            font-size: 20px;
            } 
        }  

// Mixins:
    // Like a js function:
    // Creation:
        @mixin mixin-name (parameters) {
            //Css properties
        }

    // Called:
        element {
            @include mixin-name(values);
        }

    // EXAMPLE:
        @mixin border-radius($radius) {
        -webkit-border-radius:$radius;
        -moz-border-radius:$radius;
        -ms-border-radius:$radius;
        border-radius:$radius;
        }

        #awesome {
        @include border-radius(15px);
        }


// IF => ELSE:
